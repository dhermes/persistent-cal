#!/usr/bin/env python

import os
import sys

hooks_dir = os.path.dirname(os.path.abspath(__file__))
relative_dir = os.path.join(hooks_dir, '../..')
project_root = os.path.abspath(relative_dir)
def switch_contents(fi):
  git_included_fi = os.path.join(project_root, fi)
  confidential_fi = os.path.join(project_root, '_%s' % fi)

  with open(git_included_fi, 'rU') as fh:
    git_included_contents = fh.read()

  with open(confidential_fi, 'rU') as fh:
    confidential_contents = fh.read()

  with open(git_included_fi, 'w') as fh:
    fh.write(confidential_contents)

  with open(confidential_fi, 'w') as fh:
    fh.write(git_included_contents)


protected_files = ['secret_key.py', 'admins.py', 'calendar.dat']
for fi in protected_files:
  switch_contents(fi)
  os.system('git add %s' % os.path.join(project_root, fi))

# In the rare case that protected files are the only changed,
# this switch will render the commit worthless (since it will
# move the repo into an unchanged state. In this case, we
# revert the changes before exiting.

with os.popen('git st') as fh:
  git_status = fh.read()

if ('nothing to commit' in git_status or
    'no changes added to commit' in git_status or
    'nothing added to commit' in git_status):
  msg = '# From pre-commit hook: No commit necessary, ' \
        'sensitive config unchanged. #'
  hash_head = '#' * len(msg)
  print ('%s\n%s\n%s\n\n' % (hash_head, msg, hash_head)),

  for fi in protected_files:
    switch_contents(fi)

  sys.exit(1)
